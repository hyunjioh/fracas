<?php
if(!defined("_hannet_included")) exit;
if(!defined("_act_include")) exit;

if($req['mode']){
switch($req['mode']):



/*******************************************************************************
 *
 * 로그아웃
 *
 ******************************************************************************/
case "Logout":
	@session_start();
	if(count($_SESSION)){
		foreach($_SESSION as $key => $value){
			$_SESSION[$key] = null;
			unset($_SESSION[$key]);
		}
	}
	$_SESSION['_MEMBER_']['ID']    = null;
	$_SESSION['_MEMBER_']['NAME']    = null;
	$_SESSION['_TEMP_']['BASIC'] = null;
	toplocationReplace($req['_referer_']);
break;





/*******************************************************************************
 *
 * 로그인
 *
 ******************************************************************************/
case "Login":
	$req['memberid']	= Request('loginid');
	$req['passwd']		= Request('passwd');
	$req['save_login']= Request('save_login');
	$req['passwd']		= md5($req['passwd']);

	if(!$req['_referer_']) $req['_referer_'] = "/";

	if(count($_SESSION)){
		foreach($_SESSION as $key => $value){
			unset($_SESSION['$key']);
		}
	}
	$_SESSION['_MEMBER_']['ID']    = null;
	$_SESSION['_MEMBER_']['NAME']    = null;
	$_SESSION['_TEMP_']['BASIC'] = null;
	$QUERY = sprintf("SELECT m_id  FROM  G_Member WHERE m_id = '%s' and m_status in ('normal','break') ", $req['memberid']);
	$CHECK = $db -> SelectOne($QUERY); // 데이터를 가져온다.


	$QUERY = sprintf("SELECT m_id, m_name, m_nick, m_num   FROM  G_Member WHERE m_id = '%s' and m_passwd = '%s' and m_status in ('normal','break') ", $req['memberid'], $req['passwd']);
	$DATA = $db -> SelectOne($QUERY); // 데이터를 가져온다.

	if(is_array($DATA)){
		//$QUERY = sprintf("SELECT s_Photo_01  FROM  G_Member_Sub WHERE MemberNo = '%s' ", $DATA['g_UserNum']);
		//$SUB = $db -> SelectOne($QUERY); // 데이터를 가져온다.

		$_SESSION['_MEMBER_']['ID']   = encrypt_md5($DATA['m_id'],"session");
		$_SESSION['_MEMBER_']['NAME'] = encrypt_md5($DATA['m_name'],"session");

		if($SUB){
			//setcookie("prothumb",$SUB['s_Photo_01'] ,0,"/");
		}

		if($req['save_login'] == "Y"){
			setcookie("userid", encrypt_md5($DATA["m_id"],"cookie"),time()+86400*30,"/");
		}else{
			setcookie("userid","" ,0,"/");
		}
		$db -> ExecQuery("Update G_Member Set m_lastVisit = '".$date."', m_visit = m_visit + 1, m_visitIP = '".ip_addr()."' Where m_id = '".$req['memberid']."' ");
		//$db -> ExecQuery("Update G__Log_Basic Set mid = '".$DATA["m_id"]."' Where sid = '".session_id()."' ");
		if($_GET['ty'] == "json"){
			$json['error'] = "N";
		}else{
			toplocationHref($req['return_url']);
		}
	}else{
		if($CHECK){
			$msg = "아이디 또는 비밀번호가 잘못입력되었습니다.";
			if($_GET['ty'] == "json"){
				$json['error'] = "Y";
				$json['msg']   = $msg;
			}else{
				toplocationHref($req[_referer_],$msg);
			}
		}else{
			$msg = "아이디 또는 비밀번호가 잘못입력되었습니다.";
			if($_GET['ty'] == "json"){
				$json['error'] = "Y";
				$json['msg']   = $msg;
			}else{
				toplocationHref($req[_referer_],$msg);
			}
		}
	}
	if($_GET['ty'] == "json"){
		echo json_encode($json);
	}
break;



/*******************************************************************************
 *
 * 아이디 중복체크
 *
 ******************************************************************************/
case "CheckID":
	$req['m_id']	= Request('m_id');
	$QUERY = sprintf("SELECT m_id  FROM  G_Member WHERE m_id = '%s' and m_status in ('normal','break') ", $req['m_id']);
	$CHECK = $db -> SelectOne($QUERY); // 데이터를 가져온다.
  if($CHECK) $json = false;
  else $json = true;
  echo json_encode($json);
break;


/*******************************************************************************
 *
 * 이메일 중복체크
 *
 ******************************************************************************/
case "CheckEmail":
	$req['m_email']	= Request('m_email');
	$req['m_num']	  = Request('m_num');
  if($MemberID){
  	$QUERY = sprintf("SELECT m_email  FROM  G_Member WHERE m_email = '%s' and m_status in ('normal','break') and m_id <> '%s' ", $req['m_email'], $MemberID);
  }else{
  	$QUERY = sprintf("SELECT m_email  FROM  G_Member WHERE m_email = '%s' and m_status in ('normal','break') ", $req['m_email']);
  }
	$CHECK = $db -> SelectOne($QUERY); // 데이터를 가져온다.
  if($CHECK) $json = false;
  else $json = true;
  echo json_encode($json);
break;


/*******************************************************************************
 *
 * 회원가입
 *
 ******************************************************************************/
case "JoinMember":
  // 필수값
  $RequiredField = array(
    "m_name",
    "m_id",
    "m_passwd1",
    "m_passwd2",
    "m_email",
    "m_tel1",
    "m_tel2",
    "m_tel3",
    "m_hp1",
    "m_hp2",
    "m_hp3",
    "m_zip",
    "m_addr1",
    "m_addr2",
  );

  // 변수 담기
	$req['authroot']	= Request('authroot');
	$req['namecheck']	= Request('namecheck');
	$req['m_hash']	  = Request('m_hash');
	$req['m_birth']	  = Request('m_birth');
	$req['m_sex']	    = Request('m_sex');
	$req['m_name']	  = Request('m_name');
	$req['m_id']	    = Request('m_id');
	$req['m_passwd1']	= Request('m_passwd1');
	$req['m_passwd2']	= Request('m_passwd2');
	$req['m_email']	  = Request('m_email');
	$req['m_tel1']	  = Request('m_tel1');
	$req['m_tel2']	  = Request('m_tel2');
	$req['m_tel3']	  = Request('m_tel3');
	$req['m_hp1']	    = Request('m_hp1');
	$req['m_hp2']	    = Request('m_hp2');
	$req['m_hp3']	    = Request('m_hp3');

	$req['m_zip']	    = Request('m_zip');
	$req['m_addr1']	  = Request('m_addr1');
	$req['m_addr2']	  = Request('m_addr2');

	$req['m_jumin1']	  = Request('m_jumin1');
	$req['m_jumin2']	  = Request('m_jumin2');

  foreach($RequiredField as $k => $v){
    // 필수값누락
    if(!isset($req[$v]) || empty($req[$v])){
  		historyBack();
      break;
    }
  }

  // 비밀번호 다름
  if($req['m_passwd1'] != $req['m_passwd2'])	toplocationHref($req['_referer_']);

  // 아이디 오류
  if(strlen($req['m_id']) < 4 || strlen($req['m_id']) > 16)	toplocationHref($req['_referer_']);

  // 아이디 또는 이메일 중복체크
	$existsid = $db -> SelectOne("Select * from G_Member Where m_id = '".$req['m_id']."' or m_email = '".$req['m_email']."' ");
	if($existsid){
		//historyBack();
	}

  // 본인인증 방법에 의한 중복가입 체크 (I-PIN : m_hash, 그외 본인인증)
  // 본인인증 변수 : authroot
  // 1 => 한신평 I-PIN
  // 2 => 한신평 안심실명확인
  if($req['authroot'] == "2"){
    if(!$req['m_jumin1'] || !$req['m_jumin2'])	toplocationHref($req['_referer_']);
    $req['m_hash'] = md5($req['m_jumin1'].$req['m_jumin2']);
  }
	$existsHash = $db -> SelectOne("Select * from G_Member Where m_hash = '".$req['m_hash']."' ");
	if($existsHash){
		//historyBack();
	}

  // 가공되는 변수
  $req['m_passwd'] = md5($req['m_passwd1']);
  $req['m_tel']   = $req['m_tel1']."-".$req['m_tel2']."-".$req['m_tel3'];
  $req['m_hp']   = $req['m_hp1']."-".$req['m_hp2']."-".$req['m_hp3'];

  // 데이터베이스 입력
  $Field = array(
    "m_num"      => memberNumber(),
    "m_linkCode" => XID(),
    "m_name"     => $req['m_name'],
    "m_id"       => $req['m_id'],
    "m_passwd"   => $req['m_passwd'],
    "m_email"    => $req['m_email'],
    "m_tel"      => $req['m_tel'],
    "m_hp"       => $req['m_hp'],
    "m_zip"      => $req['m_zip'],
    "m_addr1"    => $req['m_addr1'],
    "m_addr2"    => $req['m_addr2'],

    "m_sex"      => $req['m_sex'],
    "m_birthday" => $req['m_birth'],

    "m_authroot" => $req['authroot'],
    "m_hash"     => $req['m_hash'],

    "m_regDate"    => $dateTime,
    "m_regIP"      => ip_addr(),
    "m_lastVisit"  => $dateTime,
    "m_smsDate"    => $dateTime,
    "m_emailDate"  => $dateTime,
    "m_smsIP"      => ip_addr(),
    "m_emailIP"    => ip_addr(),
  );

	$Query = "INSERT INTO G_Member (`".implode("`, `", array_keys($Field))."`)  VALUES ('".implode("', '", $Field)."')";
	$RESULT = $db->ExecQuery($Query);
	if($RESULT > 0){
    new_token($token['joinEnd']);
		locationReplace($req['return_url'],"회원가입이 완료되었습니다.");
	}else{
		toplocationHref($req['_referer_'],"데이터 처리중 장애가 발생하였습니다.");
	}


break;


/*******************************************************************************
 *
 * 아이디 찾기
 *
 ******************************************************************************/
case "FindID":
	$req['m_email']	= Request('m_email');
	$QUERY = sprintf("SELECT m_email  FROM  G_Member WHERE m_email = '%s' and m_status in ('normal','break') ", $req['m_email']);
	$CHECK = $db -> SelectOne($QUERY); // 데이터를 가져온다.
  if($CHECK) $json = false;
  else $json = true;
  
//  echo json_encode($json);


  if($CHECK or is_array($CHECK)){

	/*-------------------------------------------------------------------------------------------------
	▶ 이메일 전송 */
	$Subject = "["._HOMEPAGE_NAME_."] 아이디 찾기 결과입니다.";
//								$Subject = iconv("utf-8","gb2312",$Subject);

	$AltBody = $Subject ;

	$body      = file_get_contents('../../mail/id.html');
	$body      = str_replace("[NAME]", $CHECK['m_name'], $body);
//	$body      = str_replace("[ID]",  substr($CHECK['m_id'],0,-2)."**",  $body);
	$body      = str_replace("[ID]", $CHECK['m_id'], $body);
	$body      = eregi_replace("[\]",'',$body);
//								$body      = iconv("utf-8","gb2312",$body);

	$to = $req['m_email'];
	$from = "webmaster@cnss.or.kr";

	include _CORE_PATH_."/plugin/PHPMailer_v5.1/class.phpmailer.php";
	$mail = new PHPMailer();
	$mail-> CharSet   = "UTF-8";
	$mail-> Encoding = "base64";
	$body = eregi_replace("[\]",'',$body);

	$mail->IsSendmail();  // tell the class to use Sendmail
	$mail->AddReplyTo($from,"cnss.or.kr");
	$mail->From       = $from;
	$mail->FromName   = "cnss.or.kr";
	$mail->AddAddress($to);

	$mail->Subject    = $Subject ;
	$mail->AltBody    = $AltBody; // optional, comment out and test
	$mail->MsgHTML($body);

	if($mail->Send()){
		locationReplace('/',"아이디가 이메일로 발송되었습니다.");
	} else{
		toplocationHref('/',"관리자에게 문의하세요.");
	}
  }else{
	toplocationHref($req['_referer_'],"입력하신 정보에 해당하는 아이디가 없습니다.");
  }

break;


/*******************************************************************************
 *
 * 비밀번호 재발급
 *
 ******************************************************************************/
case "ResetPassword":
	$req['m_email']	= Request('m_email');
	$QUERY = sprintf("SELECT m_email  FROM  G_Member WHERE m_email = '%s' and m_status in ('normal','break') ", $req['m_email']);
	$CHECK = $db -> SelectOne($QUERY); // 데이터를 가져온다.
  if($CHECK) $json = false;
  else $json = true;

//  echo json_encode($json);


  if($CHECK or is_array($CHECK)){

	$req['passwd'] = random_string(8);
	$req['new_passwd'] = md5($req['passwd']);
	$R = $db -> ExecQuery(sprintf("Update G_Member Set m_passwd = '%s' Where m_id = '%s' and m_name='%s'  ", $req['new_passwd'], $req['m_id'], $req['m_name']));

	/*-------------------------------------------------------------------------------------------------
	▶ 이메일 전송 */
	$Subject = "["._HOMEPAGE_NAME_."] 비밀번호 안내입니다.";
//								$Subject = iconv("utf-8","gb2312",$Subject);

	$AltBody = $Subject ;

	$body      = file_get_contents('../../mail/pw.html');
	$body      = str_replace("[NAME]", $CHECK['m_name'], $body);
//	$body      = str_replace("[ID]",  substr($CHECK['m_id'],0,-2)."**",  $body);
	$body      = str_replace("[PW]", $req['passwd'], $body);
	$body      = eregi_replace("[\]",'',$body);
//								$body      = iconv("utf-8","gb2312",$body);

	$to = $req['m_email'];
	$from = "webmaster@cnss.or.kr";

	include _CORE_PATH_."/plugin/PHPMailer_v5.1/class.phpmailer.php";
	$mail = new PHPMailer();
	$mail-> CharSet   = "UTF-8";
	$mail-> Encoding = "base64";
	$body = eregi_replace("[\]",'',$body);

	$mail->IsSendmail();  // tell the class to use Sendmail
	$mail->AddReplyTo($from,"cnss.or.kr");
	$mail->From       = $from;
	$mail->FromName   = "cnss.or.kr";
	$mail->AddAddress($to);

	$mail->Subject    = $Subject ;
	$mail->AltBody    = $AltBody; // optional, comment out and test
	$mail->MsgHTML($body);

	if($mail->Send()){
		locationReplace('/',"비밀번호가 이메일로 발송되었습니다.");
	} else{
		toplocationHref('/',"관리자에게 문의하세요.");
	}
  }else{
	toplocationHref($req['_referer_'],"입력하신 정보에 해당하는 아이디가 없습니다.");
  }
break;



/*******************************************************************************
 *
 * 회원정보수정
 *
 ******************************************************************************/
case "MyinfoUpdate":
  if(!isset($MemberID) || empty($MemberID)) locationReplace("/","로그인 후 이용하실 수 있습니다.");
  // 필수값
  $RequiredField = array(
    "m_email",
    "m_tel1",
    "m_tel2",
    "m_tel3",
    "m_hp1",
    "m_hp2",
    "m_hp3",
    "m_zip",
    "m_addr1",
    "m_addr2",
  );

  // 변수 담기
	$req['m_passwd1']	= Request('m_passwd1');
	$req['m_passwd2']	= Request('m_passwd2');
	$req['m_email']	  = Request('m_email');
	$req['m_tel1']	  = Request('m_tel1');
	$req['m_tel2']	  = Request('m_tel2');
	$req['m_tel3']	  = Request('m_tel3');
	$req['m_hp1']	    = Request('m_hp1');
	$req['m_hp2']	    = Request('m_hp2');
	$req['m_hp3']	    = Request('m_hp3');

	$req['m_zip']	    = Request('m_zip');
	$req['m_addr1']	  = Request('m_addr1');
	$req['m_addr2']	  = Request('m_addr2');


  foreach($RequiredField as $k => $v){
    // 필수값누락
    if(!isset($req[$v]) || empty($req[$v])){
  		historyBack();
      break;
    }
  }

  // 비밀번호 다름
  if(!empty($req['m_passwd1'])){
    if($req['m_passwd1'] != $req['m_passwd2'])	toplocationHref($req['_referer_']);
  }

  // 아이디 또는 이메일 중복체크
	$existsid = $db -> SelectOne("Select * from G_Member Where  m_email = '".$req['m_email']."' and m_id <> '".$MemberID."' ");
	if($existsid){
		//historyBack();
	}

  // 가공되는 변수
  $req['m_tel']   = $req['m_tel1']."-".$req['m_tel2']."-".$req['m_tel3'];
  $req['m_hp']   = $req['m_hp1']."-".$req['m_hp2']."-".$req['m_hp3'];

  // 데이터베이스 입력
  $Field = array(
    "m_email"    => $req['m_email'],
    "m_tel"      => $req['m_tel'],
    "m_hp"       => $req['m_hp'],
    "m_zip"      => $req['m_zip'],
    "m_addr1"    => $req['m_addr1'],
    "m_addr2"    => $req['m_addr2'],

    "m_updateDate"    => $dateTime,
    "m_updateIP"      => ip_addr()
  );

  if(!empty($req['m_passwd1'])){
    $Field['m_passwd'] = md5($req['m_passwd1']);
  }

  foreach($Field AS $key => $value) {
     $ret[] = $key."='".$value."'";
  }
  $RESULT = $db->ExecQuery("UPDATE G_Member SET ".implode(",", $ret)." WHERE m_id = '".$MemberID."' ");
	if($RESULT > 0){
		locationReplace($req['return_url'],"회원정보가 수정되었습니다.");
	}else{
		toplocationHref($req['_referer_'],"데이터 처리중 장애가 발생하였습니다.");
	}


break;



/*******************************************************************************
 *
 * End
 *
 ******************************************************************************/
endswitch;
}
?>